// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Status {
    PUBLIC
    PRIVATE
}

model Message {
    id        String   @id @default(cuid())
    message   String
    createdAt DateTime @default(now())

    userId   String
    user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    status   Status  @default(PRIVATE)
    codeName String?
    replies  Reply[]

    @@index([userId])
}

model Reply {
    id        String   @id @default(cuid())
    reply     String
    createdAt DateTime @default(now())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    messageId String
    message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

    @@index([messageId, userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    username      String    @unique
    password      String
    createdAt     DateTime  @default(now())
    messages      Message[]
    replies       Reply[]
    Token         Token[]
}

model TemporaryUser {
    id        String   @id @default(cuid())
    username  String   @unique
    password  String
    email     String   @unique
    createdAt DateTime @default(now())
}

enum Identifier {
    EMAIL_VERIFICATION
    PASSWORD_RESET
}

model Token {
    id         String     @id @default(cuid())
    identifier Identifier
    token      String     @unique
    expires    DateTime
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String

    @@index([userId])
}
